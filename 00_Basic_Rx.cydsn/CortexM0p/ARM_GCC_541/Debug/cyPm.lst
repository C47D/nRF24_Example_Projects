ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0plus
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"cyPm.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CySysPmSleep,"ax",%progbits
  20              		.align	2
  21              		.global	CySysPmSleep
  22              		.code	16
  23              		.thumb_func
  24              		.type	CySysPmSleep, %function
  25              	CySysPmSleep:
  26              	.LFB1:
  27              		.file 1 "Generated_Source\\PSoC4\\cyPm.c"
   1:Generated_Source\PSoC4/cyPm.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/cyPm.c **** * \file cyPm.c
   3:Generated_Source\PSoC4/cyPm.c **** * \version 5.60
   4:Generated_Source\PSoC4/cyPm.c **** *
   5:Generated_Source\PSoC4/cyPm.c **** * \brief Provides an API for the power management.
   6:Generated_Source\PSoC4/cyPm.c **** *
   7:Generated_Source\PSoC4/cyPm.c **** * \note Documentation of the API's in this file is located in the System
   8:Generated_Source\PSoC4/cyPm.c **** * Reference Guide provided with PSoC Creator.
   9:Generated_Source\PSoC4/cyPm.c **** *
  10:Generated_Source\PSoC4/cyPm.c **** ********************************************************************************
  11:Generated_Source\PSoC4/cyPm.c **** * \copyright
  12:Generated_Source\PSoC4/cyPm.c **** * Copyright 2011-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/cyPm.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/cyPm.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/cyPm.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/cyPm.c **** 
  18:Generated_Source\PSoC4/cyPm.c **** #include "cyPm.h"
  19:Generated_Source\PSoC4/cyPm.c **** #include "CyLib.h"
  20:Generated_Source\PSoC4/cyPm.c **** 
  21:Generated_Source\PSoC4/cyPm.c **** 
  22:Generated_Source\PSoC4/cyPm.c **** /*******************************************************************************
  23:Generated_Source\PSoC4/cyPm.c **** * Function Name: CySysPmSleep
  24:Generated_Source\PSoC4/cyPm.c **** ****************************************************************************//**
  25:Generated_Source\PSoC4/cyPm.c **** *
  26:Generated_Source\PSoC4/cyPm.c **** * Puts the part into the Sleep state. This is a CPU-centric power mode.
  27:Generated_Source\PSoC4/cyPm.c **** * It means that the CPU has indicated that it is in the sleep mode and
  28:Generated_Source\PSoC4/cyPm.c **** * its main clock can be removed. It is identical to Active from a peripheral
  29:Generated_Source\PSoC4/cyPm.c **** * point of view. Any enabled interrupts can cause wakeup from the Sleep mode.
  30:Generated_Source\PSoC4/cyPm.c **** *
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 2


  31:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  32:Generated_Source\PSoC4/cyPm.c **** void CySysPmSleep(void)
  33:Generated_Source\PSoC4/cyPm.c **** {
  28              		.loc 1 33 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  34:Generated_Source\PSoC4/cyPm.c ****     uint8 interruptState;
  35:Generated_Source\PSoC4/cyPm.c **** 
  36:Generated_Source\PSoC4/cyPm.c ****     interruptState = CyEnterCriticalSection();
  36              		.loc 1 36 0
  37 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  38              	.LVL0:
  37:Generated_Source\PSoC4/cyPm.c **** 
  38:Generated_Source\PSoC4/cyPm.c ****     /* CPU enters Sleep mode upon execution of WFI */
  39:Generated_Source\PSoC4/cyPm.c ****     CY_PM_CPU_SCR_REG &= (uint32) (~CY_PM_CPU_SCR_SLEEPDEEP);
  39              		.loc 1 39 0
  40 0006 044A     		ldr	r2, .L2
  41 0008 1368     		ldr	r3, [r2]
  42 000a 0421     		movs	r1, #4
  43 000c 8B43     		bics	r3, r1
  44 000e 1360     		str	r3, [r2]
  40:Generated_Source\PSoC4/cyPm.c **** 
  41:Generated_Source\PSoC4/cyPm.c ****     /* Sleep and wait for interrupt */
  42:Generated_Source\PSoC4/cyPm.c ****     CY_PM_WFI;
  45              		.loc 1 42 0
  46              		.syntax divided
  47              	@ 42 "Generated_Source\PSoC4\cyPm.c" 1
  48 0010 30BF     		WFI 
  49              	
  50              	@ 0 "" 2
  43:Generated_Source\PSoC4/cyPm.c **** 
  44:Generated_Source\PSoC4/cyPm.c ****     CyExitCriticalSection(interruptState);
  51              		.loc 1 44 0
  52              		.thumb
  53              		.syntax unified
  54 0012 FFF7FEFF 		bl	CyExitCriticalSection
  55              	.LVL1:
  45:Generated_Source\PSoC4/cyPm.c **** }
  56              		.loc 1 45 0
  57              		@ sp needed
  58 0016 10BD     		pop	{r4, pc}
  59              	.L3:
  60              		.align	2
  61              	.L2:
  62 0018 10ED00E0 		.word	-536810224
  63              		.cfi_endproc
  64              	.LFE1:
  65              		.size	CySysPmSleep, .-CySysPmSleep
  66              		.section	.text.CySysPmDeepSleep,"ax",%progbits
  67              		.align	2
  68              		.global	CySysPmDeepSleep
  69              		.code	16
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 3


  70              		.thumb_func
  71              		.type	CySysPmDeepSleep, %function
  72              	CySysPmDeepSleep:
  73              	.LFB2:
  46:Generated_Source\PSoC4/cyPm.c **** 
  47:Generated_Source\PSoC4/cyPm.c **** 
  48:Generated_Source\PSoC4/cyPm.c **** /*******************************************************************************
  49:Generated_Source\PSoC4/cyPm.c **** * Function Name: CySysPmDeepSleep
  50:Generated_Source\PSoC4/cyPm.c **** ****************************************************************************//**
  51:Generated_Source\PSoC4/cyPm.c **** *
  52:Generated_Source\PSoC4/cyPm.c **** * Puts the part into the Deep Sleep state. If the firmware attempts to enter
  53:Generated_Source\PSoC4/cyPm.c **** * this mode before the system is ready (that is, when
  54:Generated_Source\PSoC4/cyPm.c **** * PWR_CONTROL.LPM_READY = 0), then the device will go into the Sleep mode
  55:Generated_Source\PSoC4/cyPm.c **** * instead and automatically enter the originally intended mode when the
  56:Generated_Source\PSoC4/cyPm.c **** * holdoff expires.
  57:Generated_Source\PSoC4/cyPm.c **** *
  58:Generated_Source\PSoC4/cyPm.c **** * The wakeup occurs when an interrupt is received from a DeepSleep or
  59:Generated_Source\PSoC4/cyPm.c **** * Hibernate peripheral. For more details, see a corresponding
  60:Generated_Source\PSoC4/cyPm.c **** * peripheral's datasheet.
  61:Generated_Source\PSoC4/cyPm.c **** *
  62:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/cyPm.c **** void CySysPmDeepSleep(void)
  64:Generated_Source\PSoC4/cyPm.c **** {
  74              		.loc 1 64 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78 0000 10B5     		push	{r4, lr}
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 4, -8
  81              		.cfi_offset 14, -4
  65:Generated_Source\PSoC4/cyPm.c ****     uint8 interruptState;
  66:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  67:Generated_Source\PSoC4/cyPm.c ****         volatile uint32 clkSelectReg;
  68:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  69:Generated_Source\PSoC4/cyPm.c **** 
  70:Generated_Source\PSoC4/cyPm.c ****     interruptState = CyEnterCriticalSection();
  82              		.loc 1 70 0
  83 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  84              	.LVL2:
  71:Generated_Source\PSoC4/cyPm.c **** 
  72:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  73:Generated_Source\PSoC4/cyPm.c ****         /* Device enters DeepSleep mode when CPU asserts SLEEPDEEP signal */
  74:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_CONTROL_REG &= (uint32) (~CY_PM_PWR_CONTROL_HIBERNATE);
  75:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  76:Generated_Source\PSoC4/cyPm.c **** 
  77:Generated_Source\PSoC4/cyPm.c ****     #if (CY_IP_CPUSS && CY_IP_SRSSV2)
  78:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPUSS_CONFIG_REG |= CY_PM_CPUSS_CONFIG_FLSH_ACC_BYPASS;
  79:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_CPUSS && CY_IP_SRSSV2) */
  80:Generated_Source\PSoC4/cyPm.c **** 
  81:Generated_Source\PSoC4/cyPm.c ****     /* Adjust delay to wait for references to settle on wakeup from Deep Sleep */
  82:Generated_Source\PSoC4/cyPm.c ****     CY_PM_PWR_KEY_DELAY_REG = CY_SFLASH_DPSLP_KEY_DELAY_REG;
  85              		.loc 1 82 0
  86 0006 074B     		ldr	r3, .L5
  87 0008 1B88     		ldrh	r3, [r3]
  88 000a 9BB2     		uxth	r3, r3
  89 000c 064A     		ldr	r2, .L5+4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 4


  90 000e 1360     		str	r3, [r2]
  83:Generated_Source\PSoC4/cyPm.c **** 
  84:Generated_Source\PSoC4/cyPm.c ****     /* CPU enters DeepSleep/Hibernate mode upon execution of WFI */
  85:Generated_Source\PSoC4/cyPm.c ****     CY_PM_CPU_SCR_REG |= CY_PM_CPU_SCR_SLEEPDEEP;
  91              		.loc 1 85 0
  92 0010 064A     		ldr	r2, .L5+8
  93 0012 1168     		ldr	r1, [r2]
  94 0014 0423     		movs	r3, #4
  95 0016 0B43     		orrs	r3, r1
  96 0018 1360     		str	r3, [r2]
  86:Generated_Source\PSoC4/cyPm.c **** 
  87:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  88:Generated_Source\PSoC4/cyPm.c ****         /* Preserve system clock configuration and
  89:Generated_Source\PSoC4/cyPm.c ****         * reduce sysclk to <=12 MHz (Cypress ID #158710, #179888).
  90:Generated_Source\PSoC4/cyPm.c ****         */
  91:Generated_Source\PSoC4/cyPm.c ****         clkSelectReg = CY_SYS_CLK_SELECT_REG;
  92:Generated_Source\PSoC4/cyPm.c ****         CySysClkWriteSysclkDiv(CY_SYS_CLK_SYSCLK_DIV4);
  93:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  94:Generated_Source\PSoC4/cyPm.c **** 
  95:Generated_Source\PSoC4/cyPm.c ****     /* Sleep and wait for interrupt */
  96:Generated_Source\PSoC4/cyPm.c ****     CY_PM_WFI;
  97              		.loc 1 96 0
  98              		.syntax divided
  99              	@ 96 "Generated_Source\PSoC4\cyPm.c" 1
 100 001a 30BF     		WFI 
 101              	
 102              	@ 0 "" 2
  97:Generated_Source\PSoC4/cyPm.c **** 
  98:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  99:Generated_Source\PSoC4/cyPm.c ****         /* Restore system clock configuration */
 100:Generated_Source\PSoC4/cyPm.c ****         CY_SYS_CLK_SELECT_REG = clkSelectReg;
 101:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
 102:Generated_Source\PSoC4/cyPm.c **** 
 103:Generated_Source\PSoC4/cyPm.c ****     #if (CY_IP_CPUSS && CY_IP_SRSSV2)
 104:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPUSS_CONFIG_REG &= (uint32) (~CY_PM_CPUSS_CONFIG_FLSH_ACC_BYPASS);
 105:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_CPUSS && CY_IP_SRSSV2) */
 106:Generated_Source\PSoC4/cyPm.c **** 
 107:Generated_Source\PSoC4/cyPm.c ****     CyExitCriticalSection(interruptState);
 103              		.loc 1 107 0
 104              		.thumb
 105              		.syntax unified
 106 001c FFF7FEFF 		bl	CyExitCriticalSection
 107              	.LVL3:
 108:Generated_Source\PSoC4/cyPm.c **** }
 108              		.loc 1 108 0
 109              		@ sp needed
 110 0020 10BD     		pop	{r4, pc}
 111              	.L6:
 112 0022 C046     		.align	2
 113              	.L5:
 114 0024 52F1FF0F 		.word	268431698
 115 0028 04000340 		.word	1073938436
 116 002c 10ED00E0 		.word	-536810224
 117              		.cfi_endproc
 118              	.LFE2:
 119              		.size	CySysPmDeepSleep, .-CySysPmDeepSleep
 120              		.section	.text.CySysPmSetWakeupHoldoff,"ax",%progbits
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 5


 121              		.align	2
 122              		.global	CySysPmSetWakeupHoldoff
 123              		.code	16
 124              		.thumb_func
 125              		.type	CySysPmSetWakeupHoldoff, %function
 126              	CySysPmSetWakeupHoldoff:
 127              	.LFB3:
 109:Generated_Source\PSoC4/cyPm.c **** 
 110:Generated_Source\PSoC4/cyPm.c **** 
 111:Generated_Source\PSoC4/cyPm.c **** #if(CY_IP_SRSSV2)
 112:Generated_Source\PSoC4/cyPm.c **** 
 113:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 114:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmHibernate
 115:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 116:Generated_Source\PSoC4/cyPm.c ****     *
 117:Generated_Source\PSoC4/cyPm.c ****     * Puts the part into the Hibernate state. Only SRAM and UDBs are retained;
 118:Generated_Source\PSoC4/cyPm.c ****     * most internal supplies are off. Wakeup is possible from a pin or a hibernate
 119:Generated_Source\PSoC4/cyPm.c ****     * comparator only.
 120:Generated_Source\PSoC4/cyPm.c ****     *
 121:Generated_Source\PSoC4/cyPm.c ****     * It is expected that the firmware has already frozen the IO-Cells using
 122:Generated_Source\PSoC4/cyPm.c ****     * CySysPmFreezeIo() function before the call to this function. If this is
 123:Generated_Source\PSoC4/cyPm.c ****     * omitted, the IO-cells will be frozen in the same way as they are
 124:Generated_Source\PSoC4/cyPm.c ****     * in the Active to Deep Sleep transition, but will lose their state on wake up
 125:Generated_Source\PSoC4/cyPm.c ****     * (because of the reset occurring at that time).
 126:Generated_Source\PSoC4/cyPm.c ****     *
 127:Generated_Source\PSoC4/cyPm.c ****     * Because all the CPU state is lost, the CPU will start up at the reset vector.
 128:Generated_Source\PSoC4/cyPm.c ****     * To save the firmware state through the Hibernate low power mode, a
 129:Generated_Source\PSoC4/cyPm.c ****     * corresponding variable should be defined with CY_NOINIT attribute. It
 130:Generated_Source\PSoC4/cyPm.c ****     * prevents data from being initialized to zero on startup. The interrupt
 131:Generated_Source\PSoC4/cyPm.c ****     * cause of the hibernate peripheral is retained, such that it can be either
 132:Generated_Source\PSoC4/cyPm.c ****     * read by the firmware or cause an interrupt after the firmware has booted and
 133:Generated_Source\PSoC4/cyPm.c ****     * enabled the corresponding interrupt. To distinguish the wakeup from
 134:Generated_Source\PSoC4/cyPm.c ****     * the Hibernate mode and the general Reset event, the
 135:Generated_Source\PSoC4/cyPm.c ****     * \ref CySysPmGetResetReason() function could be used.
 136:Generated_Source\PSoC4/cyPm.c ****     *
 137:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 138:Generated_Source\PSoC4/cyPm.c ****     void CySysPmHibernate(void)
 139:Generated_Source\PSoC4/cyPm.c ****     {
 140:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 141:Generated_Source\PSoC4/cyPm.c **** 
 142:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 143:Generated_Source\PSoC4/cyPm.c **** 
 144:Generated_Source\PSoC4/cyPm.c ****         #if (CY_IP_HOBTO_DEVICE)
 145:Generated_Source\PSoC4/cyPm.c ****             /* Disable input buffers for all ports */
 146:Generated_Source\PSoC4/cyPm.c ****             CySysPmHibPinsDisableInputBuf();
 147:Generated_Source\PSoC4/cyPm.c ****         #endif /* (CY_IP_HOBTO_DEVICE) */
 148:Generated_Source\PSoC4/cyPm.c **** 
 149:Generated_Source\PSoC4/cyPm.c ****         /* Device enters Hibernate mode when CPU asserts SLEEPDEEP signal */
 150:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_CONTROL_REG |= CY_PM_PWR_CONTROL_HIBERNATE;
 151:Generated_Source\PSoC4/cyPm.c **** 
 152:Generated_Source\PSoC4/cyPm.c ****         /* Adjust delay to wait for references to settle on wakeup from hibernate */
 153:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = CY_SFLASH_HIB_KEY_DELAY_REG;
 154:Generated_Source\PSoC4/cyPm.c **** 
 155:Generated_Source\PSoC4/cyPm.c ****         /* CPU enters DeepSleep/Hibernate mode upon execution of WFI */
 156:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPU_SCR_REG |= CY_PM_CPU_SCR_SLEEPDEEP;
 157:Generated_Source\PSoC4/cyPm.c **** 
 158:Generated_Source\PSoC4/cyPm.c ****         /* Save token that will retain through a STOP/WAKEUP sequence
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 6


 159:Generated_Source\PSoC4/cyPm.c ****          * thus could be used by CySysPmGetResetReason() to differentiate
 160:Generated_Source\PSoC4/cyPm.c ****          * WAKEUP from a general RESET event.
 161:Generated_Source\PSoC4/cyPm.c ****          */
 162:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_PWR_STOP_REG & (uint32)(~CY_PM_PWR_STOP_TOKEN_MASK)) | CY_PM_PW
 163:Generated_Source\PSoC4/cyPm.c **** 
 164:Generated_Source\PSoC4/cyPm.c ****         /* Sleep and wait for interrupt. Wakeup from Hibernate is performed
 165:Generated_Source\PSoC4/cyPm.c ****          * through RESET state, causing a normal Boot procedure to occur.
 166:Generated_Source\PSoC4/cyPm.c ****          * The WFI instruction doesn't put the core to sleep if its wake condition
 167:Generated_Source\PSoC4/cyPm.c ****          * is true when the instruction is executed.
 168:Generated_Source\PSoC4/cyPm.c ****          */
 169:Generated_Source\PSoC4/cyPm.c ****         CY_PM_WFI;
 170:Generated_Source\PSoC4/cyPm.c **** 
 171:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 172:Generated_Source\PSoC4/cyPm.c ****     }
 173:Generated_Source\PSoC4/cyPm.c **** 
 174:Generated_Source\PSoC4/cyPm.c **** 
 175:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 176:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmStop
 177:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 178:Generated_Source\PSoC4/cyPm.c ****     *
 179:Generated_Source\PSoC4/cyPm.c ****     * Puts the part into the Stop state. All internal supplies are off;
 180:Generated_Source\PSoC4/cyPm.c ****     * no state is retained.
 181:Generated_Source\PSoC4/cyPm.c ****     *
 182:Generated_Source\PSoC4/cyPm.c ****     * Wakeup from Stop is performed by toggling the wakeup pin, causing
 183:Generated_Source\PSoC4/cyPm.c ****     * a normal boot procedure to occur. To configure the wakeup pin,
 184:Generated_Source\PSoC4/cyPm.c ****     * the Digital Input Pin component should be placed on the schematic,
 185:Generated_Source\PSoC4/cyPm.c ****     * assigned to the wakeup pin, and resistively pulled up or down to the inverse
 186:Generated_Source\PSoC4/cyPm.c ****     * state of the wakeup polarity. To distinguish the wakeup from the Stop mode
 187:Generated_Source\PSoC4/cyPm.c ****     * and the general Reset event, \ref CySysPmGetResetReason() function could be
 188:Generated_Source\PSoC4/cyPm.c ****     * used.  The wakeup pin is active low by default. The wakeup pin polarity
 189:Generated_Source\PSoC4/cyPm.c ****     * could be changed with the \ref CySysPmSetWakeupPolarity() function.
 190:Generated_Source\PSoC4/cyPm.c ****     *
 191:Generated_Source\PSoC4/cyPm.c ****     * This function freezes IO cells implicitly. It is not possible to enter
 192:Generated_Source\PSoC4/cyPm.c ****     * the STOP mode before freezing the IO cells. The IO cells remain frozen after
 193:Generated_Source\PSoC4/cyPm.c ****     * awake from the Stop mode until the firmware unfreezes them after booting
 194:Generated_Source\PSoC4/cyPm.c ****     * explicitly with \ref CySysPmUnfreezeIo() function call.
 195:Generated_Source\PSoC4/cyPm.c ****     *
 196:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 197:Generated_Source\PSoC4/cyPm.c ****     void CySysPmStop(void)
 198:Generated_Source\PSoC4/cyPm.c ****     {
 199:Generated_Source\PSoC4/cyPm.c ****         (void) CyEnterCriticalSection();
 200:Generated_Source\PSoC4/cyPm.c **** 
 201:Generated_Source\PSoC4/cyPm.c ****         /* Update token to indicate Stop mode transition. Preserve only polarity. */
 202:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_POLARITY) | CY_PM_PWR_STOP_TOKEN_
 203:Generated_Source\PSoC4/cyPm.c **** 
 204:Generated_Source\PSoC4/cyPm.c ****         /* Freeze IO-Cells to save IO-Cell state */
 205:Generated_Source\PSoC4/cyPm.c ****         CySysPmFreezeIo();
 206:Generated_Source\PSoC4/cyPm.c **** 
 207:Generated_Source\PSoC4/cyPm.c ****         /* Initiates transition to Stop state */
 208:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_REG | CY_PM_PWR_STOP_STOP;
 209:Generated_Source\PSoC4/cyPm.c **** 
 210:Generated_Source\PSoC4/cyPm.c ****         /* Depending on the clock frequency and internal timing delays,
 211:Generated_Source\PSoC4/cyPm.c ****          * the final AHB transaction may or may not complete. To guard against
 212:Generated_Source\PSoC4/cyPm.c ****          * accidentally executing an unintended instruction, it is recommended
 213:Generated_Source\PSoC4/cyPm.c ****          * to add 2 NOP cycles after the final write to the STOP register.
 214:Generated_Source\PSoC4/cyPm.c ****          */
 215:Generated_Source\PSoC4/cyPm.c ****         CY_NOP;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 7


 216:Generated_Source\PSoC4/cyPm.c ****         CY_NOP;
 217:Generated_Source\PSoC4/cyPm.c **** 
 218:Generated_Source\PSoC4/cyPm.c ****         /* Should never get to this WFI instruction */
 219:Generated_Source\PSoC4/cyPm.c ****         CY_PM_WFI;
 220:Generated_Source\PSoC4/cyPm.c **** 
 221:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Stop is performed by toggling of Wakeup pin,
 222:Generated_Source\PSoC4/cyPm.c ****          * causing a normal Boot procedure to occur. No need to exit
 223:Generated_Source\PSoC4/cyPm.c ****          * from the critical section.
 224:Generated_Source\PSoC4/cyPm.c ****          */
 225:Generated_Source\PSoC4/cyPm.c ****     }
 226:Generated_Source\PSoC4/cyPm.c **** 
 227:Generated_Source\PSoC4/cyPm.c **** 
 228:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 229:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmSetWakeupPolarity
 230:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 231:Generated_Source\PSoC4/cyPm.c ****     *
 232:Generated_Source\PSoC4/cyPm.c ****     * Wake up from the stop mode is performed by toggling the wakeup pin,
 233:Generated_Source\PSoC4/cyPm.c ****     * causing a normal boot procedure to occur. This function assigns
 234:Generated_Source\PSoC4/cyPm.c ****     * the wakeup pin active level. Setting the wakeup pin to this level will cause
 235:Generated_Source\PSoC4/cyPm.c ****     * the wakeup from stop mode. The wakeup pin is active low by default.
 236:Generated_Source\PSoC4/cyPm.c ****     *
 237:Generated_Source\PSoC4/cyPm.c ****     * \param polarity
 238:Generated_Source\PSoC4/cyPm.c ****     * - \ref CY_PM_STOP_WAKEUP_ACTIVE_LOW Logical zero will wakeup the chip
 239:Generated_Source\PSoC4/cyPm.c ****     * - \ref CY_PM_STOP_WAKEUP_ACTIVE_HIGH Logical one will wakeup the chip
 240:Generated_Source\PSoC4/cyPm.c ****     *
 241:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 242:Generated_Source\PSoC4/cyPm.c ****     void CySysPmSetWakeupPolarity(uint32 polarity)
 243:Generated_Source\PSoC4/cyPm.c ****     {
 244:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 245:Generated_Source\PSoC4/cyPm.c **** 
 246:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 247:Generated_Source\PSoC4/cyPm.c **** 
 248:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_STOP_WAKEUP_ACTIVE_LOW != polarity) ?
 249:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG | CY_PM_PWR_STOP_POLARITY) :
 250:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG & (uint32) (~CY_PM_PWR_STOP_POLARITY));
 251:Generated_Source\PSoC4/cyPm.c **** 
 252:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 253:Generated_Source\PSoC4/cyPm.c ****     }
 254:Generated_Source\PSoC4/cyPm.c **** 
 255:Generated_Source\PSoC4/cyPm.c **** 
 256:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 257:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmGetResetReason
 258:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 259:Generated_Source\PSoC4/cyPm.c ****     *
 260:Generated_Source\PSoC4/cyPm.c ****     * Retrieves the last reset reason - transition from OFF/XRES/STOP/HIBERNATE to
 261:Generated_Source\PSoC4/cyPm.c ****     * the RESET state. Note that waking up from STOP using XRES will be perceived
 262:Generated_Source\PSoC4/cyPm.c ****     * as a general RESET.
 263:Generated_Source\PSoC4/cyPm.c ****     *
 264:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_UNKN          Unknown reset reason.
 265:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_XRES          Transition from OFF/XRES to RESET
 266:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_WAKEUP_HIB    Transition/wakeup from HIBERNATE to RESET
 267:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_WAKEUP_STOP   Transition/wakeup from STOP to RESET
 268:Generated_Source\PSoC4/cyPm.c ****     *
 269:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 270:Generated_Source\PSoC4/cyPm.c ****     uint32 CySysPmGetResetReason(void)
 271:Generated_Source\PSoC4/cyPm.c ****     {
 272:Generated_Source\PSoC4/cyPm.c ****         uint32 reason = CY_PM_RESET_REASON_UNKN;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 8


 273:Generated_Source\PSoC4/cyPm.c **** 
 274:Generated_Source\PSoC4/cyPm.c ****         switch(CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_TOKEN_MASK)
 275:Generated_Source\PSoC4/cyPm.c ****         {
 276:Generated_Source\PSoC4/cyPm.c ****         /* Power up, XRES */
 277:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_XRES:
 278:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_XRES;
 279:Generated_Source\PSoC4/cyPm.c ****             break;
 280:Generated_Source\PSoC4/cyPm.c **** 
 281:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Hibernate */
 282:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_HIB:
 283:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_WAKEUP_HIB;
 284:Generated_Source\PSoC4/cyPm.c ****             break;
 285:Generated_Source\PSoC4/cyPm.c **** 
 286:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Stop (through WAKEUP pin assert) */
 287:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_STOP:
 288:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_WAKEUP_STOP;
 289:Generated_Source\PSoC4/cyPm.c ****             break;
 290:Generated_Source\PSoC4/cyPm.c **** 
 291:Generated_Source\PSoC4/cyPm.c ****         /* Unknown reason */
 292:Generated_Source\PSoC4/cyPm.c ****         default:
 293:Generated_Source\PSoC4/cyPm.c ****             break;
 294:Generated_Source\PSoC4/cyPm.c ****         }
 295:Generated_Source\PSoC4/cyPm.c **** 
 296:Generated_Source\PSoC4/cyPm.c ****         return (reason);
 297:Generated_Source\PSoC4/cyPm.c ****     }
 298:Generated_Source\PSoC4/cyPm.c **** 
 299:Generated_Source\PSoC4/cyPm.c **** 
 300:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 301:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmFreezeIo
 302:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 303:Generated_Source\PSoC4/cyPm.c ****     *
 304:Generated_Source\PSoC4/cyPm.c ****     * Freezes IO-Cells directly to save the IO-Cell state on wake up from the
 305:Generated_Source\PSoC4/cyPm.c ****     * Hibernate or Stop state. It is not required to call this function before
 306:Generated_Source\PSoC4/cyPm.c ****     * entering the Stop mode, since \ref CySysPmStop() function freezes IO-Cells
 307:Generated_Source\PSoC4/cyPm.c ****     * implicitly.
 308:Generated_Source\PSoC4/cyPm.c ****     *
 309:Generated_Source\PSoC4/cyPm.c ****     * This API is not available for PSoC 4000 family of devices.
 310:Generated_Source\PSoC4/cyPm.c ****     *
 311:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 312:Generated_Source\PSoC4/cyPm.c ****     void CySysPmFreezeIo(void)
 313:Generated_Source\PSoC4/cyPm.c ****     {
 314:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 315:Generated_Source\PSoC4/cyPm.c **** 
 316:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 317:Generated_Source\PSoC4/cyPm.c **** 
 318:Generated_Source\PSoC4/cyPm.c ****         /* Check FREEZE state to avoid recurrent IO-Cells freeze attempt,
 319:Generated_Source\PSoC4/cyPm.c ****          * since the second call to this function will cause accidental switch
 320:Generated_Source\PSoC4/cyPm.c ****          * to the STOP mode (the system will enter STOP mode immediately after
 321:Generated_Source\PSoC4/cyPm.c ****          * writing to STOP bit since both UNLOCK and FREEZE have been set correctly
 322:Generated_Source\PSoC4/cyPm.c ****          * in a previous call to this function).
 323:Generated_Source\PSoC4/cyPm.c ****          */
 324:Generated_Source\PSoC4/cyPm.c ****         if (0u == (CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_FREEZE))
 325:Generated_Source\PSoC4/cyPm.c ****         {
 326:Generated_Source\PSoC4/cyPm.c ****             /* Preserve last reset reason and disable overrides the next freeze command by peripher
 327:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_STOP | CY_PM_PWR_STOP_FREEZE | CY_PM_PWR_STOP_UNLOC
 328:Generated_Source\PSoC4/cyPm.c ****                                 (CY_PM_PWR_STOP_REG & (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_P
 329:Generated_Source\PSoC4/cyPm.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 9


 330:Generated_Source\PSoC4/cyPm.c ****             /* If reading after writing, read this register three times to delay
 331:Generated_Source\PSoC4/cyPm.c ****             *  enough time for internal settling.
 332:Generated_Source\PSoC4/cyPm.c ****             */
 333:Generated_Source\PSoC4/cyPm.c ****             (void) CY_PM_PWR_STOP_REG;
 334:Generated_Source\PSoC4/cyPm.c ****             (void) CY_PM_PWR_STOP_REG;
 335:Generated_Source\PSoC4/cyPm.c **** 
 336:Generated_Source\PSoC4/cyPm.c ****             /* Second write causes the freeze of IO-Cells to save IO-Cell state */
 337:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_REG;
 338:Generated_Source\PSoC4/cyPm.c ****         }
 339:Generated_Source\PSoC4/cyPm.c **** 
 340:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 341:Generated_Source\PSoC4/cyPm.c ****     }
 342:Generated_Source\PSoC4/cyPm.c **** 
 343:Generated_Source\PSoC4/cyPm.c **** 
 344:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 345:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmUnfreezeIo
 346:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 347:Generated_Source\PSoC4/cyPm.c ****     *
 348:Generated_Source\PSoC4/cyPm.c ****     * The IO-Cells remain frozen after awake from Hibernate or Stop mode until
 349:Generated_Source\PSoC4/cyPm.c ****     * the firmware unfreezes them after booting. The call of this function
 350:Generated_Source\PSoC4/cyPm.c ****     * unfreezes IO-Cells explicitly.
 351:Generated_Source\PSoC4/cyPm.c ****     *
 352:Generated_Source\PSoC4/cyPm.c ****     * If the firmware intent is to retain the data value on the port, then the
 353:Generated_Source\PSoC4/cyPm.c ****     * value must be read and re-written to the data register before calling this
 354:Generated_Source\PSoC4/cyPm.c ****     * API. Furthermore, the drive mode must be re-programmed.  If this is not done,
 355:Generated_Source\PSoC4/cyPm.c ****     * the pin state will change to default state the moment the freeze is removed.
 356:Generated_Source\PSoC4/cyPm.c ****     *
 357:Generated_Source\PSoC4/cyPm.c ****     * This API is not available for PSoC 4000 family of devices.
 358:Generated_Source\PSoC4/cyPm.c ****     *
 359:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 360:Generated_Source\PSoC4/cyPm.c ****     void CySysPmUnfreezeIo(void)
 361:Generated_Source\PSoC4/cyPm.c ****     {
 362:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 363:Generated_Source\PSoC4/cyPm.c **** 
 364:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 365:Generated_Source\PSoC4/cyPm.c **** 
 366:Generated_Source\PSoC4/cyPm.c ****         /* Preserve last reset reason and wakeup polarity. Then, unfreeze I/O:
 367:Generated_Source\PSoC4/cyPm.c ****          * write PWR_STOP.FREEZE=0, .UNLOCK=0x3A, .STOP=0, .TOKEN
 368:Generated_Source\PSoC4/cyPm.c ****          */
 369:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_UNLOCK |
 370:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG & (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_POLAR
 371:Generated_Source\PSoC4/cyPm.c **** 
 372:Generated_Source\PSoC4/cyPm.c ****         /* If reading after writing, read this register three times to delay
 373:Generated_Source\PSoC4/cyPm.c ****         *  enough time for internal settling.
 374:Generated_Source\PSoC4/cyPm.c ****         */
 375:Generated_Source\PSoC4/cyPm.c ****         (void) CY_PM_PWR_STOP_REG;
 376:Generated_Source\PSoC4/cyPm.c ****         (void) CY_PM_PWR_STOP_REG;
 377:Generated_Source\PSoC4/cyPm.c **** 
 378:Generated_Source\PSoC4/cyPm.c ****         /* Lock STOP mode: write PWR_STOP.FREEZE=0, UNLOCK=0x00, STOP=0, .TOKEN */
 379:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG &= (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_POLARITY);
 380:Generated_Source\PSoC4/cyPm.c **** 
 381:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 382:Generated_Source\PSoC4/cyPm.c ****     }
 383:Generated_Source\PSoC4/cyPm.c **** 
 384:Generated_Source\PSoC4/cyPm.c **** #else
 385:Generated_Source\PSoC4/cyPm.c **** 
 386:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 10


 387:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmSetWakeupHoldoff
 388:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 389:Generated_Source\PSoC4/cyPm.c ****     *
 390:Generated_Source\PSoC4/cyPm.c ****     * Sets the Deep Sleep wakeup time by scaling the hold-off to the HFCLK
 391:Generated_Source\PSoC4/cyPm.c ****     * frequency.
 392:Generated_Source\PSoC4/cyPm.c ****     *
 393:Generated_Source\PSoC4/cyPm.c ****     * This function must be called before increasing HFCLK clock frequency. It can
 394:Generated_Source\PSoC4/cyPm.c ****     * optionally be called after lowering HFCLK clock frequency in order to improve
 395:Generated_Source\PSoC4/cyPm.c ****     * Deep Sleep wakeup time.
 396:Generated_Source\PSoC4/cyPm.c ****     *
 397:Generated_Source\PSoC4/cyPm.c ****     * It is functionally acceptable to leave the default hold-off setting, but
 398:Generated_Source\PSoC4/cyPm.c ****     * Deep Sleep wakeup time may exceed the specification.
 399:Generated_Source\PSoC4/cyPm.c ****     *
 400:Generated_Source\PSoC4/cyPm.c ****     * This function is applicable only for the 4000 device family.
 401:Generated_Source\PSoC4/cyPm.c ****     *
 402:Generated_Source\PSoC4/cyPm.c ****     * \param hfclkFrequencyMhz The HFCLK frequency in MHz.
 403:Generated_Source\PSoC4/cyPm.c ****     *
 404:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 405:Generated_Source\PSoC4/cyPm.c ****     void CySysPmSetWakeupHoldoff(uint32 hfclkFrequencyMhz)
 406:Generated_Source\PSoC4/cyPm.c ****     {
 128              		.loc 1 406 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 133              	.LVL4:
 407:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = ((((uint32)(CY_PM_PWR_KEY_DELAY_REG_DEFAULT << 16u) /
 408:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_KEY_DELAY_FREQ_DEFAULT) * hfclkFrequencyMhz) >> 16u) + 1u;
 134              		.loc 1 408 0
 135 0000 034B     		ldr	r3, .L8
 136 0002 5843     		muls	r0, r3
 137              	.LVL5:
 138 0004 000C     		lsrs	r0, r0, #16
 139 0006 0130     		adds	r0, r0, #1
 407:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = ((((uint32)(CY_PM_PWR_KEY_DELAY_REG_DEFAULT << 16u) /
 140              		.loc 1 407 0
 141 0008 024B     		ldr	r3, .L8+4
 142 000a 1860     		str	r0, [r3]
 409:Generated_Source\PSoC4/cyPm.c ****     }
 143              		.loc 1 409 0
 144              		@ sp needed
 145 000c 7047     		bx	lr
 146              	.L9:
 147 000e C046     		.align	2
 148              	.L8:
 149 0010 AA2A0500 		.word	338602
 150 0014 04000340 		.word	1073938436
 151              		.cfi_endproc
 152              	.LFE3:
 153              		.size	CySysPmSetWakeupHoldoff, .-CySysPmSetWakeupHoldoff
 154              		.text
 155              	.Letext0:
 156              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 157              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 158              		.section	.debug_info,"",%progbits
 159              	.Ldebug_info0:
 160 0000 7C010000 		.4byte	0x17c
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 11


 161 0004 0400     		.2byte	0x4
 162 0006 00000000 		.4byte	.Ldebug_abbrev0
 163 000a 04       		.byte	0x4
 164 000b 01       		.uleb128 0x1
 165 000c AF000000 		.4byte	.LASF25
 166 0010 0C       		.byte	0xc
 167 0011 33000000 		.4byte	.LASF26
 168 0015 41010000 		.4byte	.LASF27
 169 0019 00000000 		.4byte	.Ldebug_ranges0+0
 170 001d 00000000 		.4byte	0
 171 0021 00000000 		.4byte	.Ldebug_line0
 172 0025 02       		.uleb128 0x2
 173 0026 01       		.byte	0x1
 174 0027 06       		.byte	0x6
 175 0028 E9010000 		.4byte	.LASF0
 176 002c 02       		.uleb128 0x2
 177 002d 01       		.byte	0x1
 178 002e 08       		.byte	0x8
 179 002f 8B010000 		.4byte	.LASF1
 180 0033 02       		.uleb128 0x2
 181 0034 02       		.byte	0x2
 182 0035 05       		.byte	0x5
 183 0036 A7010000 		.4byte	.LASF2
 184 003a 02       		.uleb128 0x2
 185 003b 02       		.byte	0x2
 186 003c 07       		.byte	0x7
 187 003d D6010000 		.4byte	.LASF3
 188 0041 02       		.uleb128 0x2
 189 0042 04       		.byte	0x4
 190 0043 05       		.byte	0x5
 191 0044 9E010000 		.4byte	.LASF4
 192 0048 02       		.uleb128 0x2
 193 0049 04       		.byte	0x4
 194 004a 07       		.byte	0x7
 195 004b 86000000 		.4byte	.LASF5
 196 004f 02       		.uleb128 0x2
 197 0050 08       		.byte	0x8
 198 0051 05       		.byte	0x5
 199 0052 00000000 		.4byte	.LASF6
 200 0056 02       		.uleb128 0x2
 201 0057 08       		.byte	0x8
 202 0058 07       		.byte	0x7
 203 0059 98000000 		.4byte	.LASF7
 204 005d 03       		.uleb128 0x3
 205 005e 04       		.byte	0x4
 206 005f 05       		.byte	0x5
 207 0060 696E7400 		.ascii	"int\000"
 208 0064 02       		.uleb128 0x2
 209 0065 04       		.byte	0x4
 210 0066 07       		.byte	0x7
 211 0067 15000000 		.4byte	.LASF8
 212 006b 04       		.uleb128 0x4
 213 006c 80000000 		.4byte	.LASF9
 214 0070 02       		.byte	0x2
 215 0071 D201     		.2byte	0x1d2
 216 0073 2C000000 		.4byte	0x2c
 217 0077 04       		.uleb128 0x4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 12


 218 0078 2A020000 		.4byte	.LASF10
 219 007c 02       		.byte	0x2
 220 007d D301     		.2byte	0x1d3
 221 007f 3A000000 		.4byte	0x3a
 222 0083 04       		.uleb128 0x4
 223 0084 0E000000 		.4byte	.LASF11
 224 0088 02       		.byte	0x2
 225 0089 D401     		.2byte	0x1d4
 226 008b 48000000 		.4byte	0x48
 227 008f 02       		.uleb128 0x2
 228 0090 04       		.byte	0x4
 229 0091 04       		.byte	0x4
 230 0092 24020000 		.4byte	.LASF12
 231 0096 02       		.uleb128 0x2
 232 0097 08       		.byte	0x8
 233 0098 04       		.byte	0x4
 234 0099 B7010000 		.4byte	.LASF13
 235 009d 02       		.uleb128 0x2
 236 009e 01       		.byte	0x1
 237 009f 08       		.byte	0x8
 238 00a0 99010000 		.4byte	.LASF14
 239 00a4 04       		.uleb128 0x4
 240 00a5 B1010000 		.4byte	.LASF15
 241 00a9 02       		.byte	0x2
 242 00aa 7D02     		.2byte	0x27d
 243 00ac B0000000 		.4byte	0xb0
 244 00b0 05       		.uleb128 0x5
 245 00b1 77000000 		.4byte	0x77
 246 00b5 04       		.uleb128 0x4
 247 00b6 D0010000 		.4byte	.LASF16
 248 00ba 02       		.byte	0x2
 249 00bb 7E02     		.2byte	0x27e
 250 00bd C1000000 		.4byte	0xc1
 251 00c1 05       		.uleb128 0x5
 252 00c2 83000000 		.4byte	0x83
 253 00c6 02       		.uleb128 0x2
 254 00c7 08       		.byte	0x8
 255 00c8 04       		.byte	0x4
 256 00c9 18020000 		.4byte	.LASF17
 257 00cd 02       		.uleb128 0x2
 258 00ce 04       		.byte	0x4
 259 00cf 07       		.byte	0x7
 260 00d0 31020000 		.4byte	.LASF18
 261 00d4 06       		.uleb128 0x6
 262 00d5 F5010000 		.4byte	.LASF19
 263 00d9 01       		.byte	0x1
 264 00da 20       		.byte	0x20
 265 00db 00000000 		.4byte	.LFB1
 266 00df 1C000000 		.4byte	.LFE1-.LFB1
 267 00e3 01       		.uleb128 0x1
 268 00e4 9C       		.byte	0x9c
 269 00e5 0B010000 		.4byte	0x10b
 270 00e9 07       		.uleb128 0x7
 271 00ea 3A020000 		.4byte	.LASF21
 272 00ee 01       		.byte	0x1
 273 00ef 22       		.byte	0x22
 274 00f0 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 13


 275 00f4 00000000 		.4byte	.LLST0
 276 00f8 08       		.uleb128 0x8
 277 00f9 06000000 		.4byte	.LVL0
 278 00fd 69010000 		.4byte	0x169
 279 0101 08       		.uleb128 0x8
 280 0102 16000000 		.4byte	.LVL1
 281 0106 74010000 		.4byte	0x174
 282 010a 00       		.byte	0
 283 010b 06       		.uleb128 0x6
 284 010c 22000000 		.4byte	.LASF20
 285 0110 01       		.byte	0x1
 286 0111 3F       		.byte	0x3f
 287 0112 00000000 		.4byte	.LFB2
 288 0116 30000000 		.4byte	.LFE2-.LFB2
 289 011a 01       		.uleb128 0x1
 290 011b 9C       		.byte	0x9c
 291 011c 42010000 		.4byte	0x142
 292 0120 07       		.uleb128 0x7
 293 0121 3A020000 		.4byte	.LASF21
 294 0125 01       		.byte	0x1
 295 0126 41       		.byte	0x41
 296 0127 6B000000 		.4byte	0x6b
 297 012b 13000000 		.4byte	.LLST1
 298 012f 08       		.uleb128 0x8
 299 0130 06000000 		.4byte	.LVL2
 300 0134 69010000 		.4byte	0x169
 301 0138 08       		.uleb128 0x8
 302 0139 20000000 		.4byte	.LVL3
 303 013d 74010000 		.4byte	0x174
 304 0141 00       		.byte	0
 305 0142 09       		.uleb128 0x9
 306 0143 68000000 		.4byte	.LASF22
 307 0147 01       		.byte	0x1
 308 0148 9501     		.2byte	0x195
 309 014a 00000000 		.4byte	.LFB3
 310 014e 18000000 		.4byte	.LFE3-.LFB3
 311 0152 01       		.uleb128 0x1
 312 0153 9C       		.byte	0x9c
 313 0154 69010000 		.4byte	0x169
 314 0158 0A       		.uleb128 0xa
 315 0159 BE010000 		.4byte	.LASF28
 316 015d 01       		.byte	0x1
 317 015e 9501     		.2byte	0x195
 318 0160 83000000 		.4byte	0x83
 319 0164 26000000 		.4byte	.LLST2
 320 0168 00       		.byte	0
 321 0169 0B       		.uleb128 0xb
 322 016a 51000000 		.4byte	.LASF23
 323 016e 51000000 		.4byte	.LASF23
 324 0172 03       		.byte	0x3
 325 0173 E5       		.byte	0xe5
 326 0174 0B       		.uleb128 0xb
 327 0175 02020000 		.4byte	.LASF24
 328 0179 02020000 		.4byte	.LASF24
 329 017d 03       		.byte	0x3
 330 017e E6       		.byte	0xe6
 331 017f 00       		.byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 14


 332              		.section	.debug_abbrev,"",%progbits
 333              	.Ldebug_abbrev0:
 334 0000 01       		.uleb128 0x1
 335 0001 11       		.uleb128 0x11
 336 0002 01       		.byte	0x1
 337 0003 25       		.uleb128 0x25
 338 0004 0E       		.uleb128 0xe
 339 0005 13       		.uleb128 0x13
 340 0006 0B       		.uleb128 0xb
 341 0007 03       		.uleb128 0x3
 342 0008 0E       		.uleb128 0xe
 343 0009 1B       		.uleb128 0x1b
 344 000a 0E       		.uleb128 0xe
 345 000b 55       		.uleb128 0x55
 346 000c 17       		.uleb128 0x17
 347 000d 11       		.uleb128 0x11
 348 000e 01       		.uleb128 0x1
 349 000f 10       		.uleb128 0x10
 350 0010 17       		.uleb128 0x17
 351 0011 00       		.byte	0
 352 0012 00       		.byte	0
 353 0013 02       		.uleb128 0x2
 354 0014 24       		.uleb128 0x24
 355 0015 00       		.byte	0
 356 0016 0B       		.uleb128 0xb
 357 0017 0B       		.uleb128 0xb
 358 0018 3E       		.uleb128 0x3e
 359 0019 0B       		.uleb128 0xb
 360 001a 03       		.uleb128 0x3
 361 001b 0E       		.uleb128 0xe
 362 001c 00       		.byte	0
 363 001d 00       		.byte	0
 364 001e 03       		.uleb128 0x3
 365 001f 24       		.uleb128 0x24
 366 0020 00       		.byte	0
 367 0021 0B       		.uleb128 0xb
 368 0022 0B       		.uleb128 0xb
 369 0023 3E       		.uleb128 0x3e
 370 0024 0B       		.uleb128 0xb
 371 0025 03       		.uleb128 0x3
 372 0026 08       		.uleb128 0x8
 373 0027 00       		.byte	0
 374 0028 00       		.byte	0
 375 0029 04       		.uleb128 0x4
 376 002a 16       		.uleb128 0x16
 377 002b 00       		.byte	0
 378 002c 03       		.uleb128 0x3
 379 002d 0E       		.uleb128 0xe
 380 002e 3A       		.uleb128 0x3a
 381 002f 0B       		.uleb128 0xb
 382 0030 3B       		.uleb128 0x3b
 383 0031 05       		.uleb128 0x5
 384 0032 49       		.uleb128 0x49
 385 0033 13       		.uleb128 0x13
 386 0034 00       		.byte	0
 387 0035 00       		.byte	0
 388 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 15


 389 0037 35       		.uleb128 0x35
 390 0038 00       		.byte	0
 391 0039 49       		.uleb128 0x49
 392 003a 13       		.uleb128 0x13
 393 003b 00       		.byte	0
 394 003c 00       		.byte	0
 395 003d 06       		.uleb128 0x6
 396 003e 2E       		.uleb128 0x2e
 397 003f 01       		.byte	0x1
 398 0040 3F       		.uleb128 0x3f
 399 0041 19       		.uleb128 0x19
 400 0042 03       		.uleb128 0x3
 401 0043 0E       		.uleb128 0xe
 402 0044 3A       		.uleb128 0x3a
 403 0045 0B       		.uleb128 0xb
 404 0046 3B       		.uleb128 0x3b
 405 0047 0B       		.uleb128 0xb
 406 0048 27       		.uleb128 0x27
 407 0049 19       		.uleb128 0x19
 408 004a 11       		.uleb128 0x11
 409 004b 01       		.uleb128 0x1
 410 004c 12       		.uleb128 0x12
 411 004d 06       		.uleb128 0x6
 412 004e 40       		.uleb128 0x40
 413 004f 18       		.uleb128 0x18
 414 0050 9742     		.uleb128 0x2117
 415 0052 19       		.uleb128 0x19
 416 0053 01       		.uleb128 0x1
 417 0054 13       		.uleb128 0x13
 418 0055 00       		.byte	0
 419 0056 00       		.byte	0
 420 0057 07       		.uleb128 0x7
 421 0058 34       		.uleb128 0x34
 422 0059 00       		.byte	0
 423 005a 03       		.uleb128 0x3
 424 005b 0E       		.uleb128 0xe
 425 005c 3A       		.uleb128 0x3a
 426 005d 0B       		.uleb128 0xb
 427 005e 3B       		.uleb128 0x3b
 428 005f 0B       		.uleb128 0xb
 429 0060 49       		.uleb128 0x49
 430 0061 13       		.uleb128 0x13
 431 0062 02       		.uleb128 0x2
 432 0063 17       		.uleb128 0x17
 433 0064 00       		.byte	0
 434 0065 00       		.byte	0
 435 0066 08       		.uleb128 0x8
 436 0067 898201   		.uleb128 0x4109
 437 006a 00       		.byte	0
 438 006b 11       		.uleb128 0x11
 439 006c 01       		.uleb128 0x1
 440 006d 31       		.uleb128 0x31
 441 006e 13       		.uleb128 0x13
 442 006f 00       		.byte	0
 443 0070 00       		.byte	0
 444 0071 09       		.uleb128 0x9
 445 0072 2E       		.uleb128 0x2e
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 16


 446 0073 01       		.byte	0x1
 447 0074 3F       		.uleb128 0x3f
 448 0075 19       		.uleb128 0x19
 449 0076 03       		.uleb128 0x3
 450 0077 0E       		.uleb128 0xe
 451 0078 3A       		.uleb128 0x3a
 452 0079 0B       		.uleb128 0xb
 453 007a 3B       		.uleb128 0x3b
 454 007b 05       		.uleb128 0x5
 455 007c 27       		.uleb128 0x27
 456 007d 19       		.uleb128 0x19
 457 007e 11       		.uleb128 0x11
 458 007f 01       		.uleb128 0x1
 459 0080 12       		.uleb128 0x12
 460 0081 06       		.uleb128 0x6
 461 0082 40       		.uleb128 0x40
 462 0083 18       		.uleb128 0x18
 463 0084 9742     		.uleb128 0x2117
 464 0086 19       		.uleb128 0x19
 465 0087 01       		.uleb128 0x1
 466 0088 13       		.uleb128 0x13
 467 0089 00       		.byte	0
 468 008a 00       		.byte	0
 469 008b 0A       		.uleb128 0xa
 470 008c 05       		.uleb128 0x5
 471 008d 00       		.byte	0
 472 008e 03       		.uleb128 0x3
 473 008f 0E       		.uleb128 0xe
 474 0090 3A       		.uleb128 0x3a
 475 0091 0B       		.uleb128 0xb
 476 0092 3B       		.uleb128 0x3b
 477 0093 05       		.uleb128 0x5
 478 0094 49       		.uleb128 0x49
 479 0095 13       		.uleb128 0x13
 480 0096 02       		.uleb128 0x2
 481 0097 17       		.uleb128 0x17
 482 0098 00       		.byte	0
 483 0099 00       		.byte	0
 484 009a 0B       		.uleb128 0xb
 485 009b 2E       		.uleb128 0x2e
 486 009c 00       		.byte	0
 487 009d 3F       		.uleb128 0x3f
 488 009e 19       		.uleb128 0x19
 489 009f 3C       		.uleb128 0x3c
 490 00a0 19       		.uleb128 0x19
 491 00a1 6E       		.uleb128 0x6e
 492 00a2 0E       		.uleb128 0xe
 493 00a3 03       		.uleb128 0x3
 494 00a4 0E       		.uleb128 0xe
 495 00a5 3A       		.uleb128 0x3a
 496 00a6 0B       		.uleb128 0xb
 497 00a7 3B       		.uleb128 0x3b
 498 00a8 0B       		.uleb128 0xb
 499 00a9 00       		.byte	0
 500 00aa 00       		.byte	0
 501 00ab 00       		.byte	0
 502              		.section	.debug_loc,"",%progbits
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 17


 503              	.Ldebug_loc0:
 504              	.LLST0:
 505 0000 06000000 		.4byte	.LVL0
 506 0004 15000000 		.4byte	.LVL1-1
 507 0008 0100     		.2byte	0x1
 508 000a 50       		.byte	0x50
 509 000b 00000000 		.4byte	0
 510 000f 00000000 		.4byte	0
 511              	.LLST1:
 512 0013 06000000 		.4byte	.LVL2
 513 0017 1F000000 		.4byte	.LVL3-1
 514 001b 0100     		.2byte	0x1
 515 001d 50       		.byte	0x50
 516 001e 00000000 		.4byte	0
 517 0022 00000000 		.4byte	0
 518              	.LLST2:
 519 0026 00000000 		.4byte	.LVL4
 520 002a 04000000 		.4byte	.LVL5
 521 002e 0100     		.2byte	0x1
 522 0030 50       		.byte	0x50
 523 0031 04000000 		.4byte	.LVL5
 524 0035 18000000 		.4byte	.LFE3
 525 0039 0400     		.2byte	0x4
 526 003b F3       		.byte	0xf3
 527 003c 01       		.uleb128 0x1
 528 003d 50       		.byte	0x50
 529 003e 9F       		.byte	0x9f
 530 003f 00000000 		.4byte	0
 531 0043 00000000 		.4byte	0
 532              		.section	.debug_aranges,"",%progbits
 533 0000 2C000000 		.4byte	0x2c
 534 0004 0200     		.2byte	0x2
 535 0006 00000000 		.4byte	.Ldebug_info0
 536 000a 04       		.byte	0x4
 537 000b 00       		.byte	0
 538 000c 0000     		.2byte	0
 539 000e 0000     		.2byte	0
 540 0010 00000000 		.4byte	.LFB1
 541 0014 1C000000 		.4byte	.LFE1-.LFB1
 542 0018 00000000 		.4byte	.LFB2
 543 001c 30000000 		.4byte	.LFE2-.LFB2
 544 0020 00000000 		.4byte	.LFB3
 545 0024 18000000 		.4byte	.LFE3-.LFB3
 546 0028 00000000 		.4byte	0
 547 002c 00000000 		.4byte	0
 548              		.section	.debug_ranges,"",%progbits
 549              	.Ldebug_ranges0:
 550 0000 00000000 		.4byte	.LFB1
 551 0004 1C000000 		.4byte	.LFE1
 552 0008 00000000 		.4byte	.LFB2
 553 000c 30000000 		.4byte	.LFE2
 554 0010 00000000 		.4byte	.LFB3
 555 0014 18000000 		.4byte	.LFE3
 556 0018 00000000 		.4byte	0
 557 001c 00000000 		.4byte	0
 558              		.section	.debug_line,"",%progbits
 559              	.Ldebug_line0:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 18


 560 0000 94000000 		.section	.debug_str,"MS",%progbits,1
 560      02004C00 
 560      00000201 
 560      FB0E0D00 
 560      01010101 
 561              	.LASF6:
 562 0000 6C6F6E67 		.ascii	"long long int\000"
 562      206C6F6E 
 562      6720696E 
 562      7400
 563              	.LASF11:
 564 000e 75696E74 		.ascii	"uint32\000"
 564      333200
 565              	.LASF8:
 566 0015 756E7369 		.ascii	"unsigned int\000"
 566      676E6564 
 566      20696E74 
 566      00
 567              	.LASF20:
 568 0022 43795379 		.ascii	"CySysPmDeepSleep\000"
 568      73506D44 
 568      65657053 
 568      6C656570 
 568      00
 569              	.LASF26:
 570 0033 47656E65 		.ascii	"Generated_Source\\PSoC4\\cyPm.c\000"
 570      72617465 
 570      645F536F 
 570      75726365 
 570      5C50536F 
 571              	.LASF23:
 572 0051 4379456E 		.ascii	"CyEnterCriticalSection\000"
 572      74657243 
 572      72697469 
 572      63616C53 
 572      65637469 
 573              	.LASF22:
 574 0068 43795379 		.ascii	"CySysPmSetWakeupHoldoff\000"
 574      73506D53 
 574      65745761 
 574      6B657570 
 574      486F6C64 
 575              	.LASF9:
 576 0080 75696E74 		.ascii	"uint8\000"
 576      3800
 577              	.LASF5:
 578 0086 6C6F6E67 		.ascii	"long unsigned int\000"
 578      20756E73 
 578      69676E65 
 578      6420696E 
 578      7400
 579              	.LASF7:
 580 0098 6C6F6E67 		.ascii	"long long unsigned int\000"
 580      206C6F6E 
 580      6720756E 
 580      7369676E 
 580      65642069 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 19


 581              	.LASF25:
 582 00af 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 582      43313120 
 582      352E342E 
 582      31203230 
 582      31363036 
 583 00e2 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0plus -mthumb -"
 583      20726576 
 583      6973696F 
 583      6E203233 
 583      37373135 
 584 0115 67202D4F 		.ascii	"g -Og -ffunction-sections -ffat-lto-objects\000"
 584      67202D66 
 584      66756E63 
 584      74696F6E 
 584      2D736563 
 585              	.LASF27:
 586 0141 433A5C55 		.ascii	"C:\\Users\\Xwx47\\Documents\\Creator\\nRF24_Example"
 586      73657273 
 586      5C587778 
 586      34375C44 
 586      6F63756D 
 587 016f 5F50726F 		.ascii	"_Projects\\00_Basic_Rx.cydsn\000"
 587      6A656374 
 587      735C3030 
 587      5F426173 
 587      69635F52 
 588              	.LASF1:
 589 018b 756E7369 		.ascii	"unsigned char\000"
 589      676E6564 
 589      20636861 
 589      7200
 590              	.LASF14:
 591 0199 63686172 		.ascii	"char\000"
 591      00
 592              	.LASF4:
 593 019e 6C6F6E67 		.ascii	"long int\000"
 593      20696E74 
 593      00
 594              	.LASF2:
 595 01a7 73686F72 		.ascii	"short int\000"
 595      7420696E 
 595      7400
 596              	.LASF15:
 597 01b1 72656731 		.ascii	"reg16\000"
 597      3600
 598              	.LASF13:
 599 01b7 646F7562 		.ascii	"double\000"
 599      6C6500
 600              	.LASF28:
 601 01be 6866636C 		.ascii	"hfclkFrequencyMhz\000"
 601      6B467265 
 601      7175656E 
 601      63794D68 
 601      7A00
 602              	.LASF16:
 603 01d0 72656733 		.ascii	"reg32\000"
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\cc1eORsV.s 			page 20


 603      3200
 604              	.LASF3:
 605 01d6 73686F72 		.ascii	"short unsigned int\000"
 605      7420756E 
 605      7369676E 
 605      65642069 
 605      6E7400
 606              	.LASF0:
 607 01e9 7369676E 		.ascii	"signed char\000"
 607      65642063 
 607      68617200 
 608              	.LASF19:
 609 01f5 43795379 		.ascii	"CySysPmSleep\000"
 609      73506D53 
 609      6C656570 
 609      00
 610              	.LASF24:
 611 0202 43794578 		.ascii	"CyExitCriticalSection\000"
 611      69744372 
 611      69746963 
 611      616C5365 
 611      6374696F 
 612              	.LASF17:
 613 0218 6C6F6E67 		.ascii	"long double\000"
 613      20646F75 
 613      626C6500 
 614              	.LASF12:
 615 0224 666C6F61 		.ascii	"float\000"
 615      7400
 616              	.LASF10:
 617 022a 75696E74 		.ascii	"uint16\000"
 617      313600
 618              	.LASF18:
 619 0231 73697A65 		.ascii	"sizetype\000"
 619      74797065 
 619      00
 620              	.LASF21:
 621 023a 696E7465 		.ascii	"interruptState\000"
 621      72727570 
 621      74537461 
 621      746500
 622              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
